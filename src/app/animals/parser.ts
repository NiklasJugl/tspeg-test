/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* parse:= WHAT SPACE* DOES SPACE* THE SPACE* animal={ANIMAL} SPACE* SAY SPACE* sound={SOUND} EOF
* ANIMAL:= COW | FOX | CAT | DOG | WORD
* SOUND:= MOO | YIF | MEOW | WOOF | WORD
* WHAT:='What'
* DOES:='does'
* THE:= 'the'
* SAY:= 'say\?'
* COW:='cow'
* FOX:='fox'
* CAT:='cat'
* DOG:='dog'
* MOO:='moo'
* YIF:='yif'
* MEOW:='meow'
* WOOF:='woof'
* WORD := word='[a-z]+'
* SPACE := ' '
* EOF := $
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    parse = "parse",
    parse_$0 = "parse_$0",
    parse_$1 = "parse_$1",
    ANIMAL_1 = "ANIMAL_1",
    ANIMAL_2 = "ANIMAL_2",
    ANIMAL_3 = "ANIMAL_3",
    ANIMAL_4 = "ANIMAL_4",
    ANIMAL_5 = "ANIMAL_5",
    SOUND_1 = "SOUND_1",
    SOUND_2 = "SOUND_2",
    SOUND_3 = "SOUND_3",
    SOUND_4 = "SOUND_4",
    SOUND_5 = "SOUND_5",
    WHAT = "WHAT",
    DOES = "DOES",
    THE = "THE",
    SAY = "SAY",
    COW = "COW",
    FOX = "FOX",
    CAT = "CAT",
    DOG = "DOG",
    MOO = "MOO",
    YIF = "YIF",
    MEOW = "MEOW",
    WOOF = "WOOF",
    WORD = "WORD",
    SPACE = "SPACE",
    EOF = "EOF",
    $EOF = "$EOF",
}
export interface parse {
    kind: ASTKinds.parse;
    animal: parse_$0;
    sound: parse_$1;
}
export type parse_$0 = ANIMAL;
export type parse_$1 = SOUND;
export type ANIMAL = ANIMAL_1 | ANIMAL_2 | ANIMAL_3 | ANIMAL_4 | ANIMAL_5;
export type ANIMAL_1 = COW;
export type ANIMAL_2 = FOX;
export type ANIMAL_3 = CAT;
export type ANIMAL_4 = DOG;
export type ANIMAL_5 = WORD;
export type SOUND = SOUND_1 | SOUND_2 | SOUND_3 | SOUND_4 | SOUND_5;
export type SOUND_1 = MOO;
export type SOUND_2 = YIF;
export type SOUND_3 = MEOW;
export type SOUND_4 = WOOF;
export type SOUND_5 = WORD;
export type WHAT = string;
export type DOES = string;
export type THE = string;
export type SAY = string;
export type COW = string;
export type FOX = string;
export type CAT = string;
export type DOG = string;
export type MOO = string;
export type YIF = string;
export type MEOW = string;
export type WOOF = string;
export interface WORD {
    kind: ASTKinds.WORD;
    word: string;
}
export type SPACE = string;
export type EOF = {kind: ASTKinds.$EOF};
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchparse($$dpth: number, $$cr?: ErrorTracker): Nullable<parse> {
        return this.run<parse>($$dpth,
            () => {
                let $scope$animal: Nullable<parse_$0>;
                let $scope$sound: Nullable<parse_$1>;
                let $$res: Nullable<parse> = null;
                if (true
                    && this.matchWHAT($$dpth + 1, $$cr) !== null
                    && this.loop<SPACE>(() => this.matchSPACE($$dpth + 1, $$cr), true) !== null
                    && this.matchDOES($$dpth + 1, $$cr) !== null
                    && this.loop<SPACE>(() => this.matchSPACE($$dpth + 1, $$cr), true) !== null
                    && this.matchTHE($$dpth + 1, $$cr) !== null
                    && this.loop<SPACE>(() => this.matchSPACE($$dpth + 1, $$cr), true) !== null
                    && ($scope$animal = this.matchparse_$0($$dpth + 1, $$cr)) !== null
                    && this.loop<SPACE>(() => this.matchSPACE($$dpth + 1, $$cr), true) !== null
                    && this.matchSAY($$dpth + 1, $$cr) !== null
                    && this.loop<SPACE>(() => this.matchSPACE($$dpth + 1, $$cr), true) !== null
                    && ($scope$sound = this.matchparse_$1($$dpth + 1, $$cr)) !== null
                    && this.matchEOF($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.parse, animal: $scope$animal, sound: $scope$sound};
                }
                return $$res;
            });
    }
    public matchparse_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<parse_$0> {
        return this.matchANIMAL($$dpth + 1, $$cr);
    }
    public matchparse_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<parse_$1> {
        return this.matchSOUND($$dpth + 1, $$cr);
    }
    public matchANIMAL($$dpth: number, $$cr?: ErrorTracker): Nullable<ANIMAL> {
        return this.choice<ANIMAL>([
            () => this.matchANIMAL_1($$dpth + 1, $$cr),
            () => this.matchANIMAL_2($$dpth + 1, $$cr),
            () => this.matchANIMAL_3($$dpth + 1, $$cr),
            () => this.matchANIMAL_4($$dpth + 1, $$cr),
            () => this.matchANIMAL_5($$dpth + 1, $$cr),
        ]);
    }
    public matchANIMAL_1($$dpth: number, $$cr?: ErrorTracker): Nullable<ANIMAL_1> {
        return this.matchCOW($$dpth + 1, $$cr);
    }
    public matchANIMAL_2($$dpth: number, $$cr?: ErrorTracker): Nullable<ANIMAL_2> {
        return this.matchFOX($$dpth + 1, $$cr);
    }
    public matchANIMAL_3($$dpth: number, $$cr?: ErrorTracker): Nullable<ANIMAL_3> {
        return this.matchCAT($$dpth + 1, $$cr);
    }
    public matchANIMAL_4($$dpth: number, $$cr?: ErrorTracker): Nullable<ANIMAL_4> {
        return this.matchDOG($$dpth + 1, $$cr);
    }
    public matchANIMAL_5($$dpth: number, $$cr?: ErrorTracker): Nullable<ANIMAL_5> {
        return this.matchWORD($$dpth + 1, $$cr);
    }
    public matchSOUND($$dpth: number, $$cr?: ErrorTracker): Nullable<SOUND> {
        return this.choice<SOUND>([
            () => this.matchSOUND_1($$dpth + 1, $$cr),
            () => this.matchSOUND_2($$dpth + 1, $$cr),
            () => this.matchSOUND_3($$dpth + 1, $$cr),
            () => this.matchSOUND_4($$dpth + 1, $$cr),
            () => this.matchSOUND_5($$dpth + 1, $$cr),
        ]);
    }
    public matchSOUND_1($$dpth: number, $$cr?: ErrorTracker): Nullable<SOUND_1> {
        return this.matchMOO($$dpth + 1, $$cr);
    }
    public matchSOUND_2($$dpth: number, $$cr?: ErrorTracker): Nullable<SOUND_2> {
        return this.matchYIF($$dpth + 1, $$cr);
    }
    public matchSOUND_3($$dpth: number, $$cr?: ErrorTracker): Nullable<SOUND_3> {
        return this.matchMEOW($$dpth + 1, $$cr);
    }
    public matchSOUND_4($$dpth: number, $$cr?: ErrorTracker): Nullable<SOUND_4> {
        return this.matchWOOF($$dpth + 1, $$cr);
    }
    public matchSOUND_5($$dpth: number, $$cr?: ErrorTracker): Nullable<SOUND_5> {
        return this.matchWORD($$dpth + 1, $$cr);
    }
    public matchWHAT($$dpth: number, $$cr?: ErrorTracker): Nullable<WHAT> {
        return this.regexAccept(String.raw`(?:What)`, $$dpth + 1, $$cr);
    }
    public matchDOES($$dpth: number, $$cr?: ErrorTracker): Nullable<DOES> {
        return this.regexAccept(String.raw`(?:does)`, $$dpth + 1, $$cr);
    }
    public matchTHE($$dpth: number, $$cr?: ErrorTracker): Nullable<THE> {
        return this.regexAccept(String.raw`(?:the)`, $$dpth + 1, $$cr);
    }
    public matchSAY($$dpth: number, $$cr?: ErrorTracker): Nullable<SAY> {
        return this.regexAccept(String.raw`(?:say\?)`, $$dpth + 1, $$cr);
    }
    public matchCOW($$dpth: number, $$cr?: ErrorTracker): Nullable<COW> {
        return this.regexAccept(String.raw`(?:cow)`, $$dpth + 1, $$cr);
    }
    public matchFOX($$dpth: number, $$cr?: ErrorTracker): Nullable<FOX> {
        return this.regexAccept(String.raw`(?:fox)`, $$dpth + 1, $$cr);
    }
    public matchCAT($$dpth: number, $$cr?: ErrorTracker): Nullable<CAT> {
        return this.regexAccept(String.raw`(?:cat)`, $$dpth + 1, $$cr);
    }
    public matchDOG($$dpth: number, $$cr?: ErrorTracker): Nullable<DOG> {
        return this.regexAccept(String.raw`(?:dog)`, $$dpth + 1, $$cr);
    }
    public matchMOO($$dpth: number, $$cr?: ErrorTracker): Nullable<MOO> {
        return this.regexAccept(String.raw`(?:moo)`, $$dpth + 1, $$cr);
    }
    public matchYIF($$dpth: number, $$cr?: ErrorTracker): Nullable<YIF> {
        return this.regexAccept(String.raw`(?:yif)`, $$dpth + 1, $$cr);
    }
    public matchMEOW($$dpth: number, $$cr?: ErrorTracker): Nullable<MEOW> {
        return this.regexAccept(String.raw`(?:meow)`, $$dpth + 1, $$cr);
    }
    public matchWOOF($$dpth: number, $$cr?: ErrorTracker): Nullable<WOOF> {
        return this.regexAccept(String.raw`(?:woof)`, $$dpth + 1, $$cr);
    }
    public matchWORD($$dpth: number, $$cr?: ErrorTracker): Nullable<WORD> {
        return this.run<WORD>($$dpth,
            () => {
                let $scope$word: Nullable<string>;
                let $$res: Nullable<WORD> = null;
                if (true
                    && ($scope$word = this.regexAccept(String.raw`(?:[a-z]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.WORD, word: $scope$word};
                }
                return $$res;
            });
    }
    public matchSPACE($$dpth: number, $$cr?: ErrorTracker): Nullable<SPACE> {
        return this.regexAccept(String.raw`(?: )`, $$dpth + 1, $$cr);
    }
    public matchEOF($$dpth: number, $$cr?: ErrorTracker): Nullable<EOF> {
        return this.match$EOF($$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchparse(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchparse(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchparse(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
    private match$EOF(et?: ErrorTracker): Nullable<{kind: ASTKinds.$EOF}> {
        const res: {kind: ASTKinds.$EOF} | null = this.finished() ? { kind: ASTKinds.$EOF } : null;
        if(et)
            et.record(this.mark(), res, { kind: "EOF", negated: this.negating });
        return res;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<parse>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}